// Code generated by mockery v2.35.2. DO NOT EDIT.

package routingtable

import (
	krpc "github.com/anacrolix/dht/v2/krpc"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PeerInfo is an autogenerated mock type for the PeerInfo type
type PeerInfo struct {
	mock.Mock
}

type PeerInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *PeerInfo) EXPECT() *PeerInfo_Expecter {
	return &PeerInfo_Expecter{mock: &_m.Mock}
}

// Addr provides a mock function with given fields:
func (_m *PeerInfo) Addr() krpc.NodeAddr {
	ret := _m.Called()

	var r0 krpc.NodeAddr
	if rf, ok := ret.Get(0).(func() krpc.NodeAddr); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(krpc.NodeAddr)
	}

	return r0
}

// PeerInfo_Addr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Addr'
type PeerInfo_Addr_Call struct {
	*mock.Call
}

// Addr is a helper method to define mock.On call
func (_e *PeerInfo_Expecter) Addr() *PeerInfo_Addr_Call {
	return &PeerInfo_Addr_Call{Call: _e.mock.On("Addr")}
}

func (_c *PeerInfo_Addr_Call) Run(run func()) *PeerInfo_Addr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeerInfo_Addr_Call) Return(_a0 krpc.NodeAddr) *PeerInfo_Addr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeerInfo_Addr_Call) RunAndReturn(run func() krpc.NodeAddr) *PeerInfo_Addr_Call {
	_c.Call.Return(run)
	return _c
}

// LastRespondedAt provides a mock function with given fields:
func (_m *PeerInfo) LastRespondedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// PeerInfo_LastRespondedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastRespondedAt'
type PeerInfo_LastRespondedAt_Call struct {
	*mock.Call
}

// LastRespondedAt is a helper method to define mock.On call
func (_e *PeerInfo_Expecter) LastRespondedAt() *PeerInfo_LastRespondedAt_Call {
	return &PeerInfo_LastRespondedAt_Call{Call: _e.mock.On("LastRespondedAt")}
}

func (_c *PeerInfo_LastRespondedAt_Call) Run(run func()) *PeerInfo_LastRespondedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeerInfo_LastRespondedAt_Call) Return(_a0 time.Time) *PeerInfo_LastRespondedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeerInfo_LastRespondedAt_Call) RunAndReturn(run func() time.Time) *PeerInfo_LastRespondedAt_Call {
	_c.Call.Return(run)
	return _c
}

// ResponseCount provides a mock function with given fields:
func (_m *PeerInfo) ResponseCount() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// PeerInfo_ResponseCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponseCount'
type PeerInfo_ResponseCount_Call struct {
	*mock.Call
}

// ResponseCount is a helper method to define mock.On call
func (_e *PeerInfo_Expecter) ResponseCount() *PeerInfo_ResponseCount_Call {
	return &PeerInfo_ResponseCount_Call{Call: _e.mock.On("ResponseCount")}
}

func (_c *PeerInfo_ResponseCount_Call) Run(run func()) *PeerInfo_ResponseCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeerInfo_ResponseCount_Call) Return(_a0 uint) *PeerInfo_ResponseCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeerInfo_ResponseCount_Call) RunAndReturn(run func() uint) *PeerInfo_ResponseCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewPeerInfo creates a new instance of PeerInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeerInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeerInfo {
	mock := &PeerInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
