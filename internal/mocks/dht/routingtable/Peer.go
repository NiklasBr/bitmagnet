// Code generated by mockery v2.35.2. DO NOT EDIT.

package routingtable

import (
	context "context"

	krpc "github.com/anacrolix/dht/v2/krpc"
	mock "github.com/stretchr/testify/mock"
)

// Peer is an autogenerated mock type for the Peer type
type Peer struct {
	mock.Mock
}

type Peer_Expecter struct {
	mock *mock.Mock
}

func (_m *Peer) EXPECT() *Peer_Expecter {
	return &Peer_Expecter{mock: &_m.Mock}
}

// Addr provides a mock function with given fields:
func (_m *Peer) Addr() krpc.NodeAddr {
	ret := _m.Called()

	var r0 krpc.NodeAddr
	if rf, ok := ret.Get(0).(func() krpc.NodeAddr); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(krpc.NodeAddr)
	}

	return r0
}

// Peer_Addr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Addr'
type Peer_Addr_Call struct {
	*mock.Call
}

// Addr is a helper method to define mock.On call
func (_e *Peer_Expecter) Addr() *Peer_Addr_Call {
	return &Peer_Addr_Call{Call: _e.mock.On("Addr")}
}

func (_c *Peer_Addr_Call) Run(run func()) *Peer_Addr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Peer_Addr_Call) Return(_a0 krpc.NodeAddr) *Peer_Addr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Peer_Addr_Call) RunAndReturn(run func() krpc.NodeAddr) *Peer_Addr_Call {
	_c.Call.Return(run)
	return _c
}

// WithLock provides a mock function with given fields: ctx, fn
func (_m *Peer) WithLock(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Peer_WithLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithLock'
type Peer_WithLock_Call struct {
	*mock.Call
}

// WithLock is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context) error
func (_e *Peer_Expecter) WithLock(ctx interface{}, fn interface{}) *Peer_WithLock_Call {
	return &Peer_WithLock_Call{Call: _e.mock.On("WithLock", ctx, fn)}
}

func (_c *Peer_WithLock_Call) Run(run func(ctx context.Context, fn func(context.Context) error)) *Peer_WithLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *Peer_WithLock_Call) Return(_a0 error) *Peer_WithLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Peer_WithLock_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *Peer_WithLock_Call {
	_c.Call.Return(run)
	return _c
}

// NewPeer creates a new instance of Peer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Peer {
	mock := &Peer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
